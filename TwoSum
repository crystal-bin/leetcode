public class TwoSum {


     /**
      O(n) runtime, O(n) space – Hash table: 
      We could reduce the runtime complexity of looking up a value to O(1) using a hash map that maps a value to its index.
      
      other:O(n2) runtime, O(1) space – Brute force:
      The brute force approach is simple. Loop through each element x and find if there is another value that equals to target – x. As finding another value requires looping through the rest of array, its runtime complexity is O(n2).
      
    **/
    
    public int[] twoSum(int[] numbers, int target) {
         int len = numbers.length;
	    int[] index = new int[2];

		HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();

		for (int i = 0; i < len; i++) {
			if (!map.containsKey(numbers[i])) {
				map.put(target - numbers[i], i);
			} else {
				index[0] = map.get(numbers[i]) + 1;
				index[1] = i + 1;
			}
		}

		return index;
    }
}
